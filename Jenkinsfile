pipeline {
    agent any

    stages {
        stage('Preparar entorno limpio') {
            steps {
                sh '''
                    echo ðŸ§¯ Deteniendo contenedores anteriores...
                    docker stop flask-app mysql-db || true

                    echo ðŸ—‘ Eliminando contenedores anteriores...
                    docker rm flask-app mysql-db || true

                    echo ðŸ”§ Eliminando redes antiguas especÃ­ficas...
                    docker network rm pipeline_net || true
                    docker network rm pipeline-test_default || true
                    docker network rm pipeline-test_pipeline_net || true

                    echo ðŸ”„ Prune de redes no usadas...
                    docker network prune -f || true
                '''
            }
        }

        stage('Ejecutar pruebas unitarias') {
            steps {
                sh '''
                    echo "ðŸ”§ Levantando servicio de base de datos..."
                    docker-compose -p pipeline-test up -d db

                    echo "âŒ› Esperando que la base de datos estÃ© lista..."
                    # Espera simple, idealmente reemplazar por check real
                    sleep 15

                    echo "ðŸ”§ Levantando servicio web..."
                    docker-compose -p pipeline-test up -d web

                    echo "ðŸ§ª Ejecutando pruebas unitarias..."
                    docker-compose exec -T web python -m unittest discover -s test -v > resultados_test.log 2>&1
                    status=$?

                    echo "ðŸ“„ Resultados de pruebas:"
                    cat resultados_test.log

                    exit $status
                '''
            }
        }

        stage('Limpiar entorno Docker') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                sh '''
                    echo ðŸ§¹ Deteniendo entorno de pruebas (redundante, por si acaso)...
                    docker-compose -p pipeline-test down || true

                    echo ðŸ—‘ Limpiando recursos no utilizados...
                    docker system prune -f || true
                '''
            }
        }

        stage('Desplegar en producciÃ³n') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                sh '''
                    echo "ðŸš€ Desplegando en producciÃ³n..."
                    docker-compose -p pipeline-test up -d --build db web
                '''
            }
        }
    }
}
