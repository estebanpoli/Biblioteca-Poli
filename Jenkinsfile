pipeline {
    agent any

    stages {
        stage('Preparar entorno limpio') {
            steps {
                sh '''
                    echo ðŸ§¯ Deteniendo contenedores anteriores...
                    docker stop flask-app mysql-db || true

                    echo ðŸ—‘ Eliminando contenedores anteriores...
                    docker rm flask-app mysql-db || true

                    echo ðŸ”§ Eliminando red de pruebas si estÃ¡ vacÃ­a...
                    docker network rm pipeline_net || true
                    docker network rm pipeline-test_default || true

                '''
            }
        }
        
        stage('Ejecutar pruebas unitarias') {
            steps {
                sh '''
                    echo "ðŸ§¼ Limpiando redes antiguas..."
                    docker network prune -f || true

                    echo "ðŸ”§ Levantando sÃ³lo el servicio web para pruebas..."
                    docker-compose -p pipeline-test up -d db
                    docker-compose -p pipeline-test up -d web

                    echo "ðŸ§ª Ejecutando pruebas unitarias..."
                    docker-compose exec -T web python -m unittest discover -s test -v > resultados_test.log 2>&1
                    status=$?

                    echo "ðŸ“„ Resultados de pruebas:"
                    cat resultados_test.log

                    echo "ðŸ§¹ Apagando entorno..."
                    docker-compose -p pipeline-test down

                    exit $status
                '''
            }
        }


        stage('Limpiar entorno Docker') {
            steps {
                sh '''
                    echo ðŸ§¹ Deteniendo entorno de pruebas...
                    docker-compose -p pipeline-test down || true
                '''
            }
        }

        stage('Desplegar en producciÃ³n') {
            steps {
                sh '''
                    echo "ðŸ”§ Levantando entorno"
                    docker-compose -p pipeline-test up -d --build web db
                '''
            }
        }
    }
}
